def define_model_cnn_hourly() -> Tuple[
    tf.keras.Model, List[np.ndarray], int, float, int
]:
    """Convolutional neural network for hourly data with 7 features, based on
    second-place model.
    Returns:
        model: keras model
        initial_weights: Array of initial weights used to reset the model to its
            original state
        epochs: Number of epochs
        lr: Learning rate
        bs: Batch size
    """

    inputs = tf.keras.layers.Input((24 * 7, 7))
    conv1 = tf.keras.layers.Conv1D(50, kernel_size=1, strides=1, activation="relu")(
        inputs
    )
    conv2 = tf.keras.layers.Conv1D(50, kernel_size=6, strides=3, activation="relu")(
        conv1
    )
    trim2 = tf.keras.layers.Cropping1D((1, 0))(conv2)
    conv3 = tf.keras.layers.Conv1D(30, kernel_size=6, strides=3, activation="relu")(
        trim2
    )
    trim3 = tf.keras.layers.Cropping1D((5, 0))(conv3)
    conv4 = tf.keras.layers.Conv1D(30, kernel_size=6, strides=3, activation="relu")(
        trim3
    )
    conv5 = tf.keras.layers.Conv1D(30, kernel_size=3, strides=3, activation="relu")(
        conv4
    )
    # extract last data point of previous convolutional layers (left-crop all but one)
    comb1 = tf.keras.layers.Concatenate(axis=2)(
        [
            conv5,
            tf.keras.layers.Cropping1D((167, 0))(conv1),
            tf.keras.layers.Cropping1D((54, 0))(conv2),
            tf.keras.layers.Cropping1D((16, 0))(conv3),
            tf.keras.layers.Cropping1D((2, 0))(conv4),
        ]
    )
    dense = tf.keras.layers.Dense(50, activation="relu")(comb1)
    output = tf.keras.layers.Flatten()(tf.keras.layers.Dense(1)(dense))
    model = tf.keras.Model(inputs, output)
    initial_weights = model.get_weights()
    epochs = 8
    lr = 0.00025
    bs = 32
    return model, initial_weights, epochs, lr, bs


Early stopping iterations: 4
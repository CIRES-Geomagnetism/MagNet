def define_model_lstm_1_min() -> Tuple[
    tf.keras.Model, List[np.ndarray], int, float, int
]:
    """Define the structure of the neural network.

    Returns:
        model: keras model
        initial_weights: Array of initial weights used to reset the model to its
            original state
        epochs: Number of epochs
        lr: Learning rate
        bs: Batch size
    """

    input = tf.keras.layers.Input((24 * 7 * 6, 13))
    conv1 = tf.keras.layers.Conv1D(64, kernel_size=6, strides=3, activation="relu")(input)
    conv2 = tf.keras.layers.Conv1D(64, kernel_size=6, strides=3, activation="relu")(conv1)
    lstm1 = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(128, return_sequences=True))(conv2)
    gru1 = tf.keras.layers.Bidirectional(tf.keras.layers.GRU(256, return_sequences=True))(lstm1)
    flatten = tf.keras.layers.Flatten()(gru1)
    drop = tf.keras.layers.Dropout(0.2)(flatten)
    dense = tf.keras.layers.Dense(128, activation="relu")(drop)
    output = tf.keras.layers.Dense(1)(dense)
    model = tf.keras.models.Model(inputs=input, outputs=output)
    initial_weights = model.get_weights()
    epochs = 7
    lr = 0.00025
    bs = 32
    return model, initial_weights, epochs, lr, bs


Early stopping iterations: 3